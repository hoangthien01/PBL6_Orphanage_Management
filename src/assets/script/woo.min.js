const wsLiveChatButtonElementId = "wsLiveChatButtonElementId02142019";
const wsLiveChatButtonIconElementId = "wsLiveChatButtonIconElementId02142019";
const wsChatBoxIFrameId = "wsChatBoxIFrameId02142019";
const wsLiveChatBadgeElementId = "wsLiveChatBadgeElementId02142019";
const wooSender_Identifier = window.wooSender_Identifier;
const CONTACT_INFO = `woosender-state-${wooSender_Identifier.accountNo}`;
const wsLiveChatBadgeCount = `wsLiveChatBadgeCount`;
const isClosedLiveChatCookieKey = `ws_livechat_isclosing`;
const ICON_OPEN_CLASS = 'wsLiveChat__icon-message';
const ICON_CLOSE_CLASS = 'wsLiveChat__icon-close';

var isMobileDevice = false;

// TODO: Local testing
// const domain = "http://localhost:1205";
// const iframeDomain = "http://localhost:8080";

// TODO: Dev environment
// const domain = "https://dev-api.woosender.com";
// const iframeDomain = "https://d1cs7k5amnt95b.cloudfront.net";

// TODO: QA environment
// const domain = "https://qa-api.woosender.com";
// const iframeDomain = "https://d1jgcif7bhkabx.cloudfront.net";

// TODO: Prod environment
const domain = "https://api.woosender.com";
const iframeDomain = "https://d3vllgz78v53eo.cloudfront.net";


function mobileCheck() {
    let check = false;
    (function (a) {
        if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true;
    })(navigator.userAgent || navigator.vendor || window.opera);
    return check;
};

window.onload = function () {
    // global size
    // isMobileDevice = this.mobileCheck();

    isMobileDevice = screen.width <= 576;

    // call chat-box setting
    this.loadSettings(wooSender_Identifier, function (settingsString) {
        const settings = JSON.parse(settingsString);

        // Doesn't show the chat box if it is deactivated in Woo Sender
        if (!settings.isActive)
            return;

        // mobile hidden
        if (settings.appearance.displayBehavior.mobile === 'hideChatBox' && isMobileDevice)
            return;

        // Out of working time
        if (!settings.preferences.isAvailableTime && settings.preferences.typicalResponseTime.outsideHoursResponseTime === 'hideChatBox')
            return;

        const isRight = settings.appearance.placement === 'bottomRight';
        const colorScheme = settings.appearance.colorScheme;
        let isOpenWidget;
        if (document.cookie.includes(isClosedLiveChatCookieKey)) {
            // If widget is closed/opened by user within 24hours => set Open widget status as none and don't care about the appearance settings anymore.
            isOpenWidget = !isLiveChatClosedByUser();

            // When use re-access the page: set expire cookie for status to next 24 hours.
            this.updateCloseWidgetCookieStatus(isOpenWidget);
        } else {
            // Else => widget not set as closed by user => get the current chat box setting
            isOpenWidget = !isMobileDevice && settings.appearance.displayBehavior.desktop === 'openChatBox';
        }

        this.loadButton(isRight, colorScheme, isOpenWidget);
        this.initChatBoxIFrame(wooSender_Identifier, settings, isRight, isOpenWidget);

        // Load badge cout from local storage
        // Only load badge count when live chat widget is closed
        // If it opening and badge count > 0 => reset
        if (!isOpenWidget) {
            var localStoreageBadge = Number(localStorage.wsLiveChatBadgeCount);
            if (localStoreageBadge > 0) {
                this.processBadge(localStoreageBadge, true);
            }
        } else {
            // reset badge count if is opening chatbox
            this.processBadge(0, false);
        }
    });

    this.subscribeMessageEvent();
};


window.onresize = function (event) {
    console.log('resize');
};

function loadSettings(config, callback) {
    if (!config || !window.XMLHttpRequest) return;

    const request = new XMLHttpRequest();

    request.onreadystatechange = function () {
        if (this.readyState === 4 && this.status === 200) {
            callback(this.responseText);
        }
    };

    request.open('GET', `${domain}/live-chat/settings?accountNo=${config.accountNo}&chatBoxId=${config.chatBoxId}`);
    request.setRequestHeader("Content-type", "application/json");
    request.send();
}

function initChatBoxIFrame(identifier, settings, isRight, isOpenWidget) {
    const iframe = document.createElement('iframe');
    iframe.id = wsChatBoxIFrameId;
    iframe.src = `${iframeDomain}/${identifier.accountNo}?initialTime=${Date.now()}`;
    iframe.style.position = 'fixed';
    iframe.style.border = 'none';
    iframe.style.display = isOpenWidget ? 'initial' : 'none';
    iframe.style.zIndex = '2147483647';
    iframe.style.minHeight = '250px';

    // handle screen width
    iframe.style.width = isMobileDevice ? '100%' : '375px';
    iframe.style.height = isMobileDevice ? '100%' : 'calc(100% - 120px)';
    iframe.style.maxHeight = isMobileDevice ? '100%' : '704px';
    if (isRight) {
        iframe.style.right = isMobileDevice ? 0 : '20px';
    } else {
        iframe.style.left = isMobileDevice ? 0 : '20px';
    }

    iframe.style.bottom = isMobileDevice ? 0 : '100px';

    let data = this.getSettings(settings);
    iframe.onload = function () {
        iframe.contentWindow.postMessage(data, '*');
    };

    document.body.appendChild(iframe);
}

const onMessengerButtonClicked = () => {
    const icon = document.getElementById(wsLiveChatButtonIconElementId);
    const chatIframe = document.getElementById(wsChatBoxIFrameId);
    const isWidgetOpening = icon.className === ICON_OPEN_CLASS
    if (isWidgetOpening) {
        if (chatIframe) {
            chatIframe.style.display = 'initial';

            let data = {
                key: iframeDomain,
                event: 'open_widget_event',
                body: {}
            };

            chatIframe.contentWindow.postMessage(data, '*');
        }
        icon.style.background = 'url(\'https://js.woosender.com/close-icon.svg\') transparent no-repeat';
        icon.className = ICON_CLOSE_CLASS;
        icon.style.width = '28px';
        icon.style.height = '30px';

        // reset badge
        this.processBadge(0, false);
    } else {
        icon.style.background = 'url(\'https://js.woosender.com/open-icon.svg\') transparent no-repeat';
        icon.className = ICON_OPEN_CLASS;
        icon.style.width = '22px';
        icon.style.height = '21px';
        if (chatIframe) {
            chatIframe.style.display = 'none';
        }
    }

    // Store close widget status based on action to cookie
    updateCloseWidgetCookieStatus(isWidgetOpening);
};

function closeChatBox() {
    // Close chat box
    const icon = document.getElementById(wsLiveChatButtonIconElementId);
    const chatIframe = document.getElementById(wsChatBoxIFrameId);
    icon.style.background = 'url(\'https://js.woosender.com/open-icon.svg\') transparent no-repeat';
    icon.className = ICON_OPEN_CLASS;
    icon.style.width = '22px';
    icon.style.height = '21px';
    if (chatIframe) {
        chatIframe.style.display = 'none';
    }

    // Store cookie for new close action
    updateCloseWidgetCookieStatus(false);
}

function loadButton(isRight, colorScheme, isOpenWidget) {
    const div1 = document.createElement('Div');
    div1.style.position = 'fixed';
    div1.style.zIndex = '2147483647';
    div1.style.borderRadius = '50%';
    div1.style.animation = 'woosender-launcher 250ms ease';
    div1.style.cursor = 'pointer';
    div1.style.width = '60px';
    div1.style.height = '60px';
    div1.style.bottom = '20px';
    div1.id = wsLiveChatButtonElementId;

    if (isRight) {
        div1.style.right = '20px';
    } else {
        div1.style.left = '20px';
    }
    div1.style.background = `linear-gradient(135deg, ${colorScheme.from} 0%, ${colorScheme.to} 100%)`;

    document.body.appendChild(div1);

    const div2 = document.createElement('Div');
    div2.addEventListener("click", onMessengerButtonClicked);

    div2.style.display = 'flex';
    div2.style.alignItems = 'center';
    div2.style.justifyContent = 'center';
    div2.style.width = '60px';
    div2.style.height = '60px';
    div2.style.transition = 'transform 100ms linear, opacity 80ms linear';
    div2.style.transform = 'rotate(0deg) scale(1)';

    div1.appendChild(div2);

    const span = document.createElement('span');
    span.id = wsLiveChatButtonIconElementId;
    span.style.width = isOpenWidget ? '28px' : '22px';
    span.style.height = isOpenWidget ? '30px' : '21px';
    span.style.background = `url(\'https://js.woosender.com/${isOpenWidget ? 'close-icon' : 'open-icon'}.svg\') transparent no-repeat`;
    span.style.display = ' inline-block';
    span.style.position = 'relative';
    span.className = isOpenWidget ? ICON_CLOSE_CLASS : ICON_OPEN_CLASS;

    const span2 = document.createElement('span');
    span2.id = wsLiveChatBadgeElementId;
    span2.style.position = 'relative';
    span2.style.top = '-20px';
    span2.style.right = '-20px';
    span2.style.borderRadius = '50%';
    span2.style.width = '20px';
    span2.style.height = '20px';
    span2.style.background = '-webkit-linear-gradient(top, #FF6969 0%,#ff0000 100%)';
    span2.style.font = 'bold 12px/16px "Helvetica Neue", sans-serif';
    span2.style.color = 'white';
    span2.style.textDecoration = 'none';
    span2.style.textAlign = 'center';
    span2.style.display = 'none';
    span2.style.verticalAlign = 'middle';

    span.appendChild(span2);

    div2.appendChild(span);
}

function subscribeMessageEvent() {
    let eventMethod = window.addEventListener ?
        "addEventListener" :
        "attachEvent";
    let eventer = window[eventMethod];
    let messageEvent = eventMethod === "attachEvent" ?
        "onmessage" :
        "message";

    eventer(messageEvent, function (e) {
        let dataReceived = e.data;

        if (!dataReceived.hasOwnProperty('eventName') || !dataReceived.hasOwnProperty('data')) {
            return;
        }
        if (e.origin === iframeDomain && dataReceived.eventName === "new_message_event" && document.getElementById(wsLiveChatButtonIconElementId).className === ICON_OPEN_CLASS) {
            // Get badge was stored in local storeage
            var localStoreageBadge = Number(localStorage.wsLiveChatBadgeCount);
            ++localStoreageBadge;
            this.processBadge(localStoreageBadge, true);
        } else if (dataReceived.eventName === 'save_contact_event') {
            localStorage.setItem(CONTACT_INFO, btoa(JSON.stringify(dataReceived.data)))
        } else if (dataReceived.eventName == 'close_widget_event') {
            this.closeChatBox();
        }
    });
}

function processBadge(num, isDisplay) {
    let badge = document.getElementById(wsLiveChatBadgeElementId);
    badge.innerText = num > 9 ? '9+' : num;
    badge.style.display = isDisplay ? 'table-cell' : 'none';

    // set local badge count
    localStorage.setItem(wsLiveChatBadgeCount, num);
}

function getSettings(settings) {
    let contact = null;
    try {
        contact = JSON.parse(atob(localStorage.getItem(CONTACT_INFO)));
    } catch {
    }

    return {
        key: iframeDomain,
        event: 'load_settings_event',
        body: {
            settings,
            contact,
            isMobileDevice
        }
    };
}

function isLiveChatClosedByUser() {
    var cookieObj = {};
    document.cookie.split(/\s*;\s*/).forEach(function (pair) {
        pair = pair.split(/\s*=\s*/);
        cookieObj[pair[0]] = pair.splice(1).join('=');
    });

    return !!cookieObj[isClosedLiveChatCookieKey] != null ? cookieObj[isClosedLiveChatCookieKey] === 'true' : false;
}

function updateCloseWidgetCookieStatus(isOpeningWidget) {
    // Expire in 24 hours
    const expriesUtcString = setExprireUTCTime();
    if (isOpeningWidget) {
        // set isClosed as false
        document.cookie = isClosedLiveChatCookieKey + '=false; expires=' + expriesUtcString + ';domain=' + window.location.hostname + ';path=/';
    } else {
        // set isClosed as true
        document.cookie = isClosedLiveChatCookieKey + '=true; expires=' + expriesUtcString + ';domain=' + window.location.hostname + ';path=/';
    }
}

function setExprireUTCTime() {
    const now = new Date();
    const additionHourAsTick = 86400000; // equal 24 hours || 24 * 60 * 60 * 1000
    now.setTime(now.getTime() + additionHourAsTick);
    const expriresDate = new Date(now);

    // Expire in 24 hours
    return expriresDate.toUTCString();
}
